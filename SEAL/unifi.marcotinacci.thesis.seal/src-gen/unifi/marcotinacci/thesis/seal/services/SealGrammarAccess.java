/*
* generated by Xtext
*/

package unifi.marcotinacci.thesis.seal.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SealGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSubjectKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cModulesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cModulesModuleDefineParserRuleCall_5_0 = (RuleCall)cModulesAssignment_5.eContents().get(0);
		private final Assignment cModulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cModulesModuleDefineParserRuleCall_6_0 = (RuleCall)cModulesAssignment_6.eContents().get(0);
		private final Keyword cEnvironmentKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cEnvironmentAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cEnvironmentEnvironmentParserRuleCall_8_0_0 = (RuleCall)cEnvironmentAssignment_8_0.eContents().get(0);
		private final Assignment cIsEmptyEnvAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final Keyword cIsEmptyEnvIsEmptyKeyword_8_1_0 = (Keyword)cIsEmptyEnvAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cRangesKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cRangesAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cRangesRangeParserRuleCall_9_2_0 = (RuleCall)cRangesAssignment_9_2.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cCommaKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cRangesAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cRangesRangeParserRuleCall_9_3_1_0 = (RuleCall)cRangesAssignment_9_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		
		//// === main program syntax ===
		//Program:
		//	"actions" "{" actions+=Action+ "}" "subject" modules+=ModuleDefine modules+=ModuleDefine* "environment"
		//	(environment=Environment | isEmptyEnv?="is empty") ("ranges" "{" ranges+=Range ("," ranges+=Range)* "}")?;
		public ParserRule getRule() { return rule; }

		//"actions" "{" actions+=Action+ "}" "subject" modules+=ModuleDefine modules+=ModuleDefine* "environment"
		//(environment=Environment | isEmptyEnv?="is empty") ("ranges" "{" ranges+=Range ("," ranges+=Range)* "}")?
		public Group getGroup() { return cGroup; }

		//"actions"
		public Keyword getActionsKeyword_0() { return cActionsKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//actions+=Action+
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }

		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//"subject"
		public Keyword getSubjectKeyword_4() { return cSubjectKeyword_4; }

		//modules+=ModuleDefine
		public Assignment getModulesAssignment_5() { return cModulesAssignment_5; }

		//ModuleDefine
		public RuleCall getModulesModuleDefineParserRuleCall_5_0() { return cModulesModuleDefineParserRuleCall_5_0; }

		//modules+=ModuleDefine*
		public Assignment getModulesAssignment_6() { return cModulesAssignment_6; }

		//ModuleDefine
		public RuleCall getModulesModuleDefineParserRuleCall_6_0() { return cModulesModuleDefineParserRuleCall_6_0; }

		//"environment"
		public Keyword getEnvironmentKeyword_7() { return cEnvironmentKeyword_7; }

		//environment=Environment | isEmptyEnv?="is empty"
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//environment=Environment
		public Assignment getEnvironmentAssignment_8_0() { return cEnvironmentAssignment_8_0; }

		//Environment
		public RuleCall getEnvironmentEnvironmentParserRuleCall_8_0_0() { return cEnvironmentEnvironmentParserRuleCall_8_0_0; }

		//isEmptyEnv?="is empty"
		public Assignment getIsEmptyEnvAssignment_8_1() { return cIsEmptyEnvAssignment_8_1; }

		//"is empty"
		public Keyword getIsEmptyEnvIsEmptyKeyword_8_1_0() { return cIsEmptyEnvIsEmptyKeyword_8_1_0; }

		//("ranges" "{" ranges+=Range ("," ranges+=Range)* "}")?
		public Group getGroup_9() { return cGroup_9; }

		//"ranges"
		public Keyword getRangesKeyword_9_0() { return cRangesKeyword_9_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }

		//ranges+=Range
		public Assignment getRangesAssignment_9_2() { return cRangesAssignment_9_2; }

		//Range
		public RuleCall getRangesRangeParserRuleCall_9_2_0() { return cRangesRangeParserRuleCall_9_2_0; }

		//("," ranges+=Range)*
		public Group getGroup_9_3() { return cGroup_9_3; }

		//","
		public Keyword getCommaKeyword_9_3_0() { return cCommaKeyword_9_3_0; }

		//ranges+=Range
		public Assignment getRangesAssignment_9_3_1() { return cRangesAssignment_9_3_1; }

		//Range
		public RuleCall getRangesRangeParserRuleCall_9_3_1_0() { return cRangesRangeParserRuleCall_9_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_4() { return cRightCurlyBracketKeyword_9_4; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModuleModuleDefineCrossReference_0_0 = (CrossReference)cModuleAssignment_0.eContents().get(0);
		private final RuleCall cModuleModuleDefineIDTerminalRuleCall_0_0_1 = (RuleCall)cModuleModuleDefineCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariableVariableDeclarationCrossReference_2_0 = (CrossReference)cVariableAssignment_2.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cVariableVariableDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFromAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFromValueParserRuleCall_5_0 = (RuleCall)cFromAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cToAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cToValueParserRuleCall_7_0 = (RuleCall)cToAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cDeltaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cEqualsSignKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cDeltaAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cDeltaValueParserRuleCall_9_2_0 = (RuleCall)cDeltaAssignment_9_2.eContents().get(0);
		
		//Range:
		//	module=[ModuleDefine] "." variable=[VariableDeclaration] "in" "[" from=Value "," to=Value "]" ("delta" "="
		//	delta=Value)?;
		public ParserRule getRule() { return rule; }

		//module=[ModuleDefine] "." variable=[VariableDeclaration] "in" "[" from=Value "," to=Value "]" ("delta" "=" delta=Value)?
		public Group getGroup() { return cGroup; }

		//module=[ModuleDefine]
		public Assignment getModuleAssignment_0() { return cModuleAssignment_0; }

		//[ModuleDefine]
		public CrossReference getModuleModuleDefineCrossReference_0_0() { return cModuleModuleDefineCrossReference_0_0; }

		//ID
		public RuleCall getModuleModuleDefineIDTerminalRuleCall_0_0_1() { return cModuleModuleDefineIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//variable=[VariableDeclaration]
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//[VariableDeclaration]
		public CrossReference getVariableVariableDeclarationCrossReference_2_0() { return cVariableVariableDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getVariableVariableDeclarationIDTerminalRuleCall_2_0_1() { return cVariableVariableDeclarationIDTerminalRuleCall_2_0_1; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//from=Value
		public Assignment getFromAssignment_5() { return cFromAssignment_5; }

		//Value
		public RuleCall getFromValueParserRuleCall_5_0() { return cFromValueParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//to=Value
		public Assignment getToAssignment_7() { return cToAssignment_7; }

		//Value
		public RuleCall getToValueParserRuleCall_7_0() { return cToValueParserRuleCall_7_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }

		//("delta" "=" delta=Value)?
		public Group getGroup_9() { return cGroup_9; }

		//"delta"
		public Keyword getDeltaKeyword_9_0() { return cDeltaKeyword_9_0; }

		//"="
		public Keyword getEqualsSignKeyword_9_1() { return cEqualsSignKeyword_9_1; }

		//delta=Value
		public Assignment getDeltaAssignment_9_2() { return cDeltaAssignment_9_2; }

		//Value
		public RuleCall getDeltaValueParserRuleCall_9_2_0() { return cDeltaValueParserRuleCall_9_2_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Action:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ModuleDefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleDefine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cVariablesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_3_0_0 = (RuleCall)cVariablesAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cRulesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cRulesRuleParserRuleCall_4_0_0 = (RuleCall)cRulesAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTargetKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cNeverKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cNeverAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cNeverExpressionParserRuleCall_5_2_0 = (RuleCall)cNeverAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// === module syntax ===
		//ModuleDefine:
		//	"module" name=ID "{" (variables+=VariableDeclaration ";")+ (rules+=Rule ";")+ // TODO target solo su subject
		//	// TODO min max never always
		//	("target" "never" never+=Expression)* "}";
		public ParserRule getRule() { return rule; }

		//"module" name=ID "{" (variables+=VariableDeclaration ";")+ (rules+=Rule ";")+ // TODO target solo su subject
		//// TODO min max never always
		//("target" "never" never+=Expression)* "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(variables+=VariableDeclaration ";")+
		public Group getGroup_3() { return cGroup_3; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_3_0() { return cVariablesAssignment_3_0; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_3_0_0() { return cVariablesVariableDeclarationParserRuleCall_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//(rules+=Rule ";")+
		public Group getGroup_4() { return cGroup_4; }

		//rules+=Rule
		public Assignment getRulesAssignment_4_0() { return cRulesAssignment_4_0; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_4_0_0() { return cRulesRuleParserRuleCall_4_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//("target" "never" never+=Expression)*
		public Group getGroup_5() { return cGroup_5; }

		//"target"
		public Keyword getTargetKeyword_5_0() { return cTargetKeyword_5_0; }

		//"never"
		public Keyword getNeverKeyword_5_1() { return cNeverKeyword_5_1; }

		//never+=Expression
		public Assignment getNeverAssignment_5_2() { return cNeverAssignment_5_2; }

		//Expression
		public RuleCall getNeverExpressionParserRuleCall_5_2_0() { return cNeverExpressionParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//	type=Type name=ID "=" expr=Expression;
		public ParserRule getRule() { return rule; }

		//type=Type name=ID "=" expr=Expression
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expr=Expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0() { return cExprExpressionParserRuleCall_3_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameIntKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameFloatKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNameBoolKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		
		//Type:
		//	name="int" | name="float" | name="bool";
		public ParserRule getRule() { return rule; }

		//name="int" | name="float" | name="bool"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="int"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"int"
		public Keyword getNameIntKeyword_0_0() { return cNameIntKeyword_0_0; }

		//name="float"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"float"
		public Keyword getNameFloatKeyword_1_0() { return cNameFloatKeyword_1_0; }

		//name="bool"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"bool"
		public Keyword getNameBoolKeyword_2_0() { return cNameBoolKeyword_2_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCondAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCondExpressionParserRuleCall_0_0 = (RuleCall)cCondAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cActionActionCrossReference_2_0 = (CrossReference)cActionAssignment_2.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_2_0_1 = (RuleCall)cActionActionCrossReference_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNdCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNdCasesNDCaseParserRuleCall_4_0 = (RuleCall)cNdCasesAssignment_4.eContents().get(0);
		
		//Rule:
		//	cond=Expression "[" action=[Action] "]" ndCases+=NDCase+;
		public ParserRule getRule() { return rule; }

		//cond=Expression "[" action=[Action] "]" ndCases+=NDCase+
		public Group getGroup() { return cGroup; }

		//cond=Expression
		public Assignment getCondAssignment_0() { return cCondAssignment_0; }

		//Expression
		public RuleCall getCondExpressionParserRuleCall_0_0() { return cCondExpressionParserRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//action=[Action]
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }

		//[Action]
		public CrossReference getActionActionCrossReference_2_0() { return cActionActionCrossReference_2_0; }

		//ID
		public RuleCall getActionActionIDTerminalRuleCall_2_0_1() { return cActionActionIDTerminalRuleCall_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//ndCases+=NDCase+
		public Assignment getNdCasesAssignment_4() { return cNdCasesAssignment_4; }

		//NDCase
		public RuleCall getNdCasesNDCaseParserRuleCall_4_0() { return cNdCasesNDCaseParserRuleCall_4_0; }
	}

	public class NDCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NDCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCasesCaseParserRuleCall_1_0 = (RuleCall)cCasesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCasesCaseParserRuleCall_2_1_0 = (RuleCall)cCasesAssignment_2_1.eContents().get(0);
		
		//NDCase:
		//	"=>" cases+=Case ("#" cases+=Case)*;
		public ParserRule getRule() { return rule; }

		//"=>" cases+=Case ("#" cases+=Case)*
		public Group getGroup() { return cGroup; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_0() { return cEqualsSignGreaterThanSignKeyword_0; }

		//cases+=Case
		public Assignment getCasesAssignment_1() { return cCasesAssignment_1; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_1_0() { return cCasesCaseParserRuleCall_1_0; }

		//("#" cases+=Case)*
		public Group getGroup_2() { return cGroup_2; }

		//"#"
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }

		//cases+=Case
		public Assignment getCasesAssignment_2_1() { return cCasesAssignment_2_1; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_2_1_0() { return cCasesCaseParserRuleCall_2_1_0; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWeightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWeightExpressionParserRuleCall_1_0 = (RuleCall)cWeightAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cHasConditionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cHasConditionCommaKeyword_2_0_0 = (Keyword)cHasConditionAssignment_2_0.eContents().get(0);
		private final Assignment cCondAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_2_1_0 = (RuleCall)cCondAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpdateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpdateUpdateParserRuleCall_4_0 = (RuleCall)cUpdateAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUpdateAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUpdateUpdateParserRuleCall_5_1_0 = (RuleCall)cUpdateAssignment_5_1.eContents().get(0);
		
		//Case:
		//	"<" weight=Expression (hasCondition?="," cond=Expression)? ">" update+=Update ("," update+=Update)*;
		public ParserRule getRule() { return rule; }

		//"<" weight=Expression (hasCondition?="," cond=Expression)? ">" update+=Update ("," update+=Update)*
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//weight=Expression
		public Assignment getWeightAssignment_1() { return cWeightAssignment_1; }

		//Expression
		public RuleCall getWeightExpressionParserRuleCall_1_0() { return cWeightExpressionParserRuleCall_1_0; }

		//(hasCondition?="," cond=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//hasCondition?=","
		public Assignment getHasConditionAssignment_2_0() { return cHasConditionAssignment_2_0; }

		//","
		public Keyword getHasConditionCommaKeyword_2_0_0() { return cHasConditionCommaKeyword_2_0_0; }

		//cond=Expression
		public Assignment getCondAssignment_2_1() { return cCondAssignment_2_1; }

		//Expression
		public RuleCall getCondExpressionParserRuleCall_2_1_0() { return cCondExpressionParserRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//update+=Update
		public Assignment getUpdateAssignment_4() { return cUpdateAssignment_4; }

		//Update
		public RuleCall getUpdateUpdateParserRuleCall_4_0() { return cUpdateUpdateParserRuleCall_4_0; }

		//("," update+=Update)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//update+=Update
		public Assignment getUpdateAssignment_5_1() { return cUpdateAssignment_5_1; }

		//Update
		public RuleCall getUpdateUpdateParserRuleCall_5_1_0() { return cUpdateUpdateParserRuleCall_5_1_0; }
	}

	public class UpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Update");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNoActionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNoactionKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAssignAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cVariableVariableDeclarationCrossReference_1_1_0 = (CrossReference)cVariableAssignment_1_1.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVariableVariableDeclarationCrossReference_1_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExprAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_1_3_0 = (RuleCall)cExprAssignment_1_3.eContents().get(0);
		
		//Update:
		//	{NoAction} "noaction" | {Assign} variable=[VariableDeclaration] "=" expr=Expression;
		public ParserRule getRule() { return rule; }

		//{NoAction} "noaction" | {Assign} variable=[VariableDeclaration] "=" expr=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NoAction} "noaction"
		public Group getGroup_0() { return cGroup_0; }

		//{NoAction}
		public Action getNoActionAction_0_0() { return cNoActionAction_0_0; }

		//"noaction"
		public Keyword getNoactionKeyword_0_1() { return cNoactionKeyword_0_1; }

		//{Assign} variable=[VariableDeclaration] "=" expr=Expression
		public Group getGroup_1() { return cGroup_1; }

		//{Assign}
		public Action getAssignAction_1_0() { return cAssignAction_1_0; }

		//variable=[VariableDeclaration]
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }

		//[VariableDeclaration]
		public CrossReference getVariableVariableDeclarationCrossReference_1_1_0() { return cVariableVariableDeclarationCrossReference_1_1_0; }

		//ID
		public RuleCall getVariableVariableDeclarationIDTerminalRuleCall_1_1_0_1() { return cVariableVariableDeclarationIDTerminalRuleCall_1_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//expr=Expression
		public Assignment getExprAssignment_1_3() { return cExprAssignment_1_3; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_3_0() { return cExprExpressionParserRuleCall_1_3_0; }
	}

	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModulesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModulesModuleDefineCrossReference_0_0 = (CrossReference)cModulesAssignment_0.eContents().get(0);
		private final RuleCall cModulesModuleDefineIDTerminalRuleCall_0_0_1 = (RuleCall)cModulesModuleDefineCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cActionsActionCrossReference_1_1_0 = (CrossReference)cActionsAssignment_1_1.eContents().get(0);
		private final RuleCall cActionsActionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cActionsActionCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketVerticalLineKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cModulesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cModulesModuleDefineCrossReference_1_3_0 = (CrossReference)cModulesAssignment_1_3.eContents().get(0);
		private final RuleCall cModulesModuleDefineIDTerminalRuleCall_1_3_0_1 = (RuleCall)cModulesModuleDefineCrossReference_1_3_0.eContents().get(1);
		
		//Environment:
		//	modules+=[ModuleDefine] ("|{" actions+=[Action]+ "}|" modules+=[ModuleDefine])*;
		public ParserRule getRule() { return rule; }

		//modules+=[ModuleDefine] ("|{" actions+=[Action]+ "}|" modules+=[ModuleDefine])*
		public Group getGroup() { return cGroup; }

		//modules+=[ModuleDefine]
		public Assignment getModulesAssignment_0() { return cModulesAssignment_0; }

		//[ModuleDefine]
		public CrossReference getModulesModuleDefineCrossReference_0_0() { return cModulesModuleDefineCrossReference_0_0; }

		//ID
		public RuleCall getModulesModuleDefineIDTerminalRuleCall_0_0_1() { return cModulesModuleDefineIDTerminalRuleCall_0_0_1; }

		//("|{" actions+=[Action]+ "}|" modules+=[ModuleDefine])*
		public Group getGroup_1() { return cGroup_1; }

		//"|{"
		public Keyword getVerticalLineLeftCurlyBracketKeyword_1_0() { return cVerticalLineLeftCurlyBracketKeyword_1_0; }

		//actions+=[Action]+
		public Assignment getActionsAssignment_1_1() { return cActionsAssignment_1_1; }

		//[Action]
		public CrossReference getActionsActionCrossReference_1_1_0() { return cActionsActionCrossReference_1_1_0; }

		//ID
		public RuleCall getActionsActionIDTerminalRuleCall_1_1_0_1() { return cActionsActionIDTerminalRuleCall_1_1_0_1; }

		//"}|"
		public Keyword getRightCurlyBracketVerticalLineKeyword_1_2() { return cRightCurlyBracketVerticalLineKeyword_1_2; }

		//modules+=[ModuleDefine]
		public Assignment getModulesAssignment_1_3() { return cModulesAssignment_1_3; }

		//[ModuleDefine]
		public CrossReference getModulesModuleDefineCrossReference_1_3_0() { return cModulesModuleDefineCrossReference_1_3_0; }

		//ID
		public RuleCall getModulesModuleDefineIDTerminalRuleCall_1_3_0_1() { return cModulesModuleDefineIDTerminalRuleCall_1_3_0_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cLogicalParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// === expression syntax ===
		//Expression:
		//	Logical;
		public ParserRule getRule() { return rule; }

		//Logical
		public RuleCall getLogicalParserRuleCall() { return cLogicalParserRuleCall; }
	}

	public class LogicalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Logical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAndLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAndKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cOrLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cOrKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRelationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Logical returns Expression:
		//	Relation (({And.left=current} "and" | {Or.left=current} "or") right=Relation)*;
		public ParserRule getRule() { return rule; }

		//Relation (({And.left=current} "and" | {Or.left=current} "or") right=Relation)*
		public Group getGroup() { return cGroup; }

		//Relation
		public RuleCall getRelationParserRuleCall_0() { return cRelationParserRuleCall_0; }

		//(({And.left=current} "and" | {Or.left=current} "or") right=Relation)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current} "and" | {Or.left=current} "or"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{And.left=current} "and"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{And.left=current}
		public Action getAndLeftAction_1_0_0_0() { return cAndLeftAction_1_0_0_0; }

		//"and"
		public Keyword getAndKeyword_1_0_0_1() { return cAndKeyword_1_0_0_1; }

		//{Or.left=current} "or"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0_1_0() { return cOrLeftAction_1_0_1_0; }

		//"or"
		public Keyword getOrKeyword_1_0_1_1() { return cOrKeyword_1_0_1_1; }

		//right=Relation
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Relation
		public RuleCall getRightRelationParserRuleCall_1_1_0() { return cRightRelationParserRuleCall_1_1_0; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cLeqLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cLessLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cEqLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cNeqLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cGeqLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Action cGtrLeftAction_1_0_5_0 = (Action)cGroup_1_0_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_5_1 = (Keyword)cGroup_1_0_5.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Relation returns Expression:
		//	Addition (({Leq.left=current} "<=" | {Less.left=current} "<" | {Eq.left=current} "==" | {Neq.left=current} "!=" |
		//	{Geq.left=current} ">=" | {Gtr.left=current} ">") right=Addition)?;
		public ParserRule getRule() { return rule; }

		//Addition (({Leq.left=current} "<=" | {Less.left=current} "<" | {Eq.left=current} "==" | {Neq.left=current} "!=" |
		//{Geq.left=current} ">=" | {Gtr.left=current} ">") right=Addition)?
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//(({Leq.left=current} "<=" | {Less.left=current} "<" | {Eq.left=current} "==" | {Neq.left=current} "!=" |
		//{Geq.left=current} ">=" | {Gtr.left=current} ">") right=Addition)?
		public Group getGroup_1() { return cGroup_1; }

		//{Leq.left=current} "<=" | {Less.left=current} "<" | {Eq.left=current} "==" | {Neq.left=current} "!=" |
		//{Geq.left=current} ">=" | {Gtr.left=current} ">"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Leq.left=current} "<="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Leq.left=current}
		public Action getLeqLeftAction_1_0_0_0() { return cLeqLeftAction_1_0_0_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_0_1() { return cLessThanSignEqualsSignKeyword_1_0_0_1; }

		//{Less.left=current} "<"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Less.left=current}
		public Action getLessLeftAction_1_0_1_0() { return cLessLeftAction_1_0_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_1_1() { return cLessThanSignKeyword_1_0_1_1; }

		//{Eq.left=current} "=="
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{Eq.left=current}
		public Action getEqLeftAction_1_0_2_0() { return cEqLeftAction_1_0_2_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_2_1() { return cEqualsSignEqualsSignKeyword_1_0_2_1; }

		//{Neq.left=current} "!="
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{Neq.left=current}
		public Action getNeqLeftAction_1_0_3_0() { return cNeqLeftAction_1_0_3_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_3_1() { return cExclamationMarkEqualsSignKeyword_1_0_3_1; }

		//{Geq.left=current} ">="
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//{Geq.left=current}
		public Action getGeqLeftAction_1_0_4_0() { return cGeqLeftAction_1_0_4_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_4_1() { return cGreaterThanSignEqualsSignKeyword_1_0_4_1; }

		//{Gtr.left=current} ">"
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//{Gtr.left=current}
		public Action getGtrLeftAction_1_0_5_0() { return cGtrLeftAction_1_0_5_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_5_1() { return cGreaterThanSignKeyword_1_0_5_1; }

		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//	PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//(({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current} "*" | {Div.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multi.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Div.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCondAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCondPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cCondAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cQuantifierAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cExistsKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cNameAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_3_2_0 = (RuleCall)cNameAssignment_3_2.eContents().get(0);
		private final Keyword cColonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cModuleAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final CrossReference cModuleModuleDefineCrossReference_3_4_0 = (CrossReference)cModuleAssignment_3_4.eContents().get(0);
		private final RuleCall cModuleModuleDefineIDTerminalRuleCall_3_4_0_1 = (RuleCall)cModuleModuleDefineCrossReference_3_4_0.eContents().get(1);
		private final Keyword cSuchThatKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cCondAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cCondPrimaryExpressionParserRuleCall_3_6_0 = (RuleCall)cCondAssignment_3_6.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cExternalReferenceAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cModuleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cModuleQuantifierCrossReference_4_1_0 = (CrossReference)cModuleAssignment_4_1.eContents().get(0);
		private final RuleCall cModuleQuantifierIDTerminalRuleCall_4_1_0_1 = (RuleCall)cModuleQuantifierCrossReference_4_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cVariableAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final CrossReference cVariableVariableDeclarationCrossReference_4_3_0 = (CrossReference)cVariableAssignment_4_3.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationIDTerminalRuleCall_4_3_0_1 = (RuleCall)cVariableVariableDeclarationCrossReference_4_3_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cLocalReferenceAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cThisKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cFullStopKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cVariableAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cVariableVariableDeclarationCrossReference_5_2_0 = (CrossReference)cVariableAssignment_5_2.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationIDTerminalRuleCall_5_2_0_1 = (RuleCall)cVariableVariableDeclarationCrossReference_5_2_0.eContents().get(1);
		
		//PrimaryExpression returns Expression:
		//	"(" Expression ")" | {Not} "not" cond=PrimaryExpression | {Literal} value=Value | {Quantifier} "exists" name=ID ":"
		//	module=[ModuleDefine] "such that" cond=PrimaryExpression | {ExternalReference} module=[Quantifier] "."
		//	variable=[VariableDeclaration] | {LocalReference} ("this" ".")? variable=[VariableDeclaration];
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | {Not} "not" cond=PrimaryExpression | {Literal} value=Value | {Quantifier} "exists" name=ID ":"
		//module=[ModuleDefine] "such that" cond=PrimaryExpression | {ExternalReference} module=[Quantifier] "."
		//variable=[VariableDeclaration] | {LocalReference} ("this" ".")? variable=[VariableDeclaration]
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{Not} "not" cond=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }

		//"not"
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }

		//cond=PrimaryExpression
		public Assignment getCondAssignment_1_2() { return cCondAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getCondPrimaryExpressionParserRuleCall_1_2_0() { return cCondPrimaryExpressionParserRuleCall_1_2_0; }

		//{Literal} value=Value
		public Group getGroup_2() { return cGroup_2; }

		//{Literal}
		public Action getLiteralAction_2_0() { return cLiteralAction_2_0; }

		//value=Value
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_1_0() { return cValueValueParserRuleCall_2_1_0; }

		//{Quantifier} "exists" name=ID ":" module=[ModuleDefine] "such that" cond=PrimaryExpression
		public Group getGroup_3() { return cGroup_3; }

		//{Quantifier}
		public Action getQuantifierAction_3_0() { return cQuantifierAction_3_0; }

		//"exists"
		public Keyword getExistsKeyword_3_1() { return cExistsKeyword_3_1; }

		//name=ID
		public Assignment getNameAssignment_3_2() { return cNameAssignment_3_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_2_0() { return cNameIDTerminalRuleCall_3_2_0; }

		//":"
		public Keyword getColonKeyword_3_3() { return cColonKeyword_3_3; }

		//module=[ModuleDefine]
		public Assignment getModuleAssignment_3_4() { return cModuleAssignment_3_4; }

		//[ModuleDefine]
		public CrossReference getModuleModuleDefineCrossReference_3_4_0() { return cModuleModuleDefineCrossReference_3_4_0; }

		//ID
		public RuleCall getModuleModuleDefineIDTerminalRuleCall_3_4_0_1() { return cModuleModuleDefineIDTerminalRuleCall_3_4_0_1; }

		//"such that"
		public Keyword getSuchThatKeyword_3_5() { return cSuchThatKeyword_3_5; }

		//cond=PrimaryExpression
		public Assignment getCondAssignment_3_6() { return cCondAssignment_3_6; }

		//PrimaryExpression
		public RuleCall getCondPrimaryExpressionParserRuleCall_3_6_0() { return cCondPrimaryExpressionParserRuleCall_3_6_0; }

		//{ExternalReference} module=[Quantifier] "." variable=[VariableDeclaration]
		public Group getGroup_4() { return cGroup_4; }

		//{ExternalReference}
		public Action getExternalReferenceAction_4_0() { return cExternalReferenceAction_4_0; }

		//module=[Quantifier]
		public Assignment getModuleAssignment_4_1() { return cModuleAssignment_4_1; }

		//[Quantifier]
		public CrossReference getModuleQuantifierCrossReference_4_1_0() { return cModuleQuantifierCrossReference_4_1_0; }

		//ID
		public RuleCall getModuleQuantifierIDTerminalRuleCall_4_1_0_1() { return cModuleQuantifierIDTerminalRuleCall_4_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_4_2() { return cFullStopKeyword_4_2; }

		//variable=[VariableDeclaration]
		public Assignment getVariableAssignment_4_3() { return cVariableAssignment_4_3; }

		//[VariableDeclaration]
		public CrossReference getVariableVariableDeclarationCrossReference_4_3_0() { return cVariableVariableDeclarationCrossReference_4_3_0; }

		//ID
		public RuleCall getVariableVariableDeclarationIDTerminalRuleCall_4_3_0_1() { return cVariableVariableDeclarationIDTerminalRuleCall_4_3_0_1; }

		//{LocalReference} ("this" ".")? variable=[VariableDeclaration]
		public Group getGroup_5() { return cGroup_5; }

		//{LocalReference}
		public Action getLocalReferenceAction_5_0() { return cLocalReferenceAction_5_0; }

		//("this" ".")?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"this"
		public Keyword getThisKeyword_5_1_0() { return cThisKeyword_5_1_0; }

		//"."
		public Keyword getFullStopKeyword_5_1_1() { return cFullStopKeyword_5_1_1; }

		//variable=[VariableDeclaration]
		public Assignment getVariableAssignment_5_2() { return cVariableAssignment_5_2; }

		//[VariableDeclaration]
		public CrossReference getVariableVariableDeclarationCrossReference_5_2_0() { return cVariableVariableDeclarationCrossReference_5_2_0; }

		//ID
		public RuleCall getVariableVariableDeclarationIDTerminalRuleCall_5_2_0_1() { return cVariableVariableDeclarationIDTerminalRuleCall_5_2_0_1; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	INT | FLOAT | BOOL;
		public ParserRule getRule() { return rule; }

		//INT | FLOAT | BOOL
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1() { return cFLOATTerminalRuleCall_1; }

		//BOOL
		public RuleCall getBOOLTerminalRuleCall_2() { return cBOOLTerminalRuleCall_2; }
	}
	
	
	private ProgramElements pProgram;
	private RangeElements pRange;
	private ActionElements pAction;
	private ModuleDefineElements pModuleDefine;
	private VariableDeclarationElements pVariableDeclaration;
	private TypeElements pType;
	private RuleElements pRule;
	private NDCaseElements pNDCase;
	private CaseElements pCase;
	private UpdateElements pUpdate;
	private EnvironmentElements pEnvironment;
	private ExpressionElements pExpression;
	private LogicalElements pLogical;
	private RelationElements pRelation;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private PrimaryExpressionElements pPrimaryExpression;
	private ValueElements pValue;
	private TerminalRule tINT;
	private TerminalRule tFLOAT;
	private TerminalRule tBOOL;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SealGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("unifi.marcotinacci.thesis.seal.Seal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// === main program syntax ===
	//Program:
	//	"actions" "{" actions+=Action+ "}" "subject" modules+=ModuleDefine modules+=ModuleDefine* "environment"
	//	(environment=Environment | isEmptyEnv?="is empty") ("ranges" "{" ranges+=Range ("," ranges+=Range)* "}")?;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Range:
	//	module=[ModuleDefine] "." variable=[VariableDeclaration] "in" "[" from=Value "," to=Value "]" ("delta" "="
	//	delta=Value)?;
	public RangeElements getRangeAccess() {
		return (pRange != null) ? pRange : (pRange = new RangeElements());
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//Action:
	//	name=ID;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//// === module syntax ===
	//ModuleDefine:
	//	"module" name=ID "{" (variables+=VariableDeclaration ";")+ (rules+=Rule ";")+ // TODO target solo su subject
	//	// TODO min max never always
	//	("target" "never" never+=Expression)* "}";
	public ModuleDefineElements getModuleDefineAccess() {
		return (pModuleDefine != null) ? pModuleDefine : (pModuleDefine = new ModuleDefineElements());
	}
	
	public ParserRule getModuleDefineRule() {
		return getModuleDefineAccess().getRule();
	}

	//VariableDeclaration:
	//	type=Type name=ID "=" expr=Expression;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//Type:
	//	name="int" | name="float" | name="bool";
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Rule:
	//	cond=Expression "[" action=[Action] "]" ndCases+=NDCase+;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//NDCase:
	//	"=>" cases+=Case ("#" cases+=Case)*;
	public NDCaseElements getNDCaseAccess() {
		return (pNDCase != null) ? pNDCase : (pNDCase = new NDCaseElements());
	}
	
	public ParserRule getNDCaseRule() {
		return getNDCaseAccess().getRule();
	}

	//Case:
	//	"<" weight=Expression (hasCondition?="," cond=Expression)? ">" update+=Update ("," update+=Update)*;
	public CaseElements getCaseAccess() {
		return (pCase != null) ? pCase : (pCase = new CaseElements());
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//Update:
	//	{NoAction} "noaction" | {Assign} variable=[VariableDeclaration] "=" expr=Expression;
	public UpdateElements getUpdateAccess() {
		return (pUpdate != null) ? pUpdate : (pUpdate = new UpdateElements());
	}
	
	public ParserRule getUpdateRule() {
		return getUpdateAccess().getRule();
	}

	//Environment:
	//	modules+=[ModuleDefine] ("|{" actions+=[Action]+ "}|" modules+=[ModuleDefine])*;
	public EnvironmentElements getEnvironmentAccess() {
		return (pEnvironment != null) ? pEnvironment : (pEnvironment = new EnvironmentElements());
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}

	//// === expression syntax ===
	//Expression:
	//	Logical;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Logical returns Expression:
	//	Relation (({And.left=current} "and" | {Or.left=current} "or") right=Relation)*;
	public LogicalElements getLogicalAccess() {
		return (pLogical != null) ? pLogical : (pLogical = new LogicalElements());
	}
	
	public ParserRule getLogicalRule() {
		return getLogicalAccess().getRule();
	}

	//Relation returns Expression:
	//	Addition (({Leq.left=current} "<=" | {Less.left=current} "<" | {Eq.left=current} "==" | {Neq.left=current} "!=" |
	//	{Geq.left=current} ">=" | {Gtr.left=current} ">") right=Addition)?;
	public RelationElements getRelationAccess() {
		return (pRelation != null) ? pRelation : (pRelation = new RelationElements());
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	"(" Expression ")" | {Not} "not" cond=PrimaryExpression | {Literal} value=Value | {Quantifier} "exists" name=ID ":"
	//	module=[ModuleDefine] "such that" cond=PrimaryExpression | {ExternalReference} module=[Quantifier] "."
	//	variable=[VariableDeclaration] | {LocalReference} ("this" ".")? variable=[VariableDeclaration];
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Value:
	//	INT | FLOAT | BOOL;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal FLOAT returns ecore::EDouble:
	//	"-"? INT* ("." INT+)? | "-"? INT+ "." | "-"? INT+ ("." INT*)? (("e" | "E") ("-" | "+")? INT+);
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal BOOL returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
