grammar unifi.marcotinacci.thesis.seal.Seal with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate seal "http://www.marcotinacci.unifi/thesis/seal/Seal"

Program:
	actions=ActionSet?
	(modules+=ModuleDefine)*
	system=System
;

ActionSet: 'actions' '{' (actions+=Action)+ '}' ;

Action: name=ID ;

ModuleDefine: 
	'module' name=ID '{'
		(vars+=VariableDeclaration ';')+
		(rules+=Rule ';')+
	'}' 
;

VariableDeclaration:
	type=Type name=ID
;

Type:
	type='int' | type='float' | type='bool'
;

Rule:
	cond=Expression '[' action=[Action] ']' '=>' cases+=Case (','cases+=Case)+
;

// expression syntax

Expression:
	Logical;

Logical returns Expression:
	Relation 
		(({And.left=current} 'and' 
		| {Or.left=current} 'or') 
		right=Relation)*;

Relation returns Expression:
	Addition 
		(({Leq.left=current} '<='
		| {Less.left=current} '<'
		| {Eq.left=current} '=='
		| {Geq.left=current} '>='
		| {Gtr.left=current} '>')
		right=Addition)?;

Addition returns Expression:
	Multiplication 
		(({Plus.left=current} '+' 
		| {Minus.left=current} '-') 
		right=Multiplication)*;

Multiplication returns Expression:
	PrimaryExpression 
		(({Multi.left=current} '*' 
		| {Div.left=current} '/') 
		right=PrimaryExpression)*;

PrimaryExpression returns Expression:
	'(' Expression ')'
	| { Not } 'not' cond=Expression
	| { Literal } value=Value
	| { VariableReference } var=[VariableDeclaration]
	// TODO modificare sintassi quantificatore come segue
	| { Quantifier } 'E' name=ID ':' module=[ModuleDefine] '.' cond=Expression
;

Value: INT | FLOAT | BOOL;

terminal INT returns ecore::EInt: ('0'..'9')+;

terminal FLOAT returns ecore::EDouble: ('0'..'9')* ('.' ('0'..'9')+)?;

terminal BOOL returns ecore::EBoolean: 'true' | 'false';

