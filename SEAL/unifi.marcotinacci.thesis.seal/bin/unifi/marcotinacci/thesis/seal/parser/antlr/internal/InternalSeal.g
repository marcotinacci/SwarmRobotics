/*
* generated by Xtext
*/
grammar InternalSeal;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package unifi.marcotinacci.thesis.seal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package unifi.marcotinacci.thesis.seal.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import unifi.marcotinacci.thesis.seal.services.SealGrammarAccess;

}

@parser::members {

 	private SealGrammarAccess grammarAccess;
 	
    public InternalSealParser(TokenStream input, SealGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected SealGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='actions' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getActionsKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getActionsActionParserRuleCall_2_0()); 
	    }
		lv_actions_2_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_2_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_3());
    }
	otherlv_4='subject' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProgramAccess().getSubjectKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getModulesModuleDefineParserRuleCall_5_0()); 
	    }
		lv_modules_5_0=ruleModuleDefine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"modules",
        		lv_modules_5_0, 
        		"ModuleDefine");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getModulesModuleDefineParserRuleCall_6_0()); 
	    }
		lv_modules_6_0=ruleModuleDefine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"modules",
        		lv_modules_6_0, 
        		"ModuleDefine");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='environment' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getProgramAccess().getEnvironmentKeyword_7());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getEnvironmentEnvironmentParserRuleCall_8_0_0()); 
	    }
		lv_environment_8_0=ruleEnvironment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		set(
       			$current, 
       			"environment",
        		lv_environment_8_0, 
        		"Environment");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_isEmptyEnv_9_0=	'is empty' 
    {
        newLeafNode(lv_isEmptyEnv_9_0, grammarAccess.getProgramAccess().getIsEmptyEnvIsEmptyKeyword_8_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProgramRule());
	        }
       		setWithLastConsumed($current, "isEmptyEnv", true, "is empty");
	    }

)
))(	otherlv_10='ranges' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getProgramAccess().getRangesKeyword_9_0());
    }
	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_9_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getRangesRangeParserRuleCall_9_2_0()); 
	    }
		lv_ranges_12_0=ruleRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"ranges",
        		lv_ranges_12_0, 
        		"Range");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getProgramAccess().getCommaKeyword_9_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getRangesRangeParserRuleCall_9_3_1_0()); 
	    }
		lv_ranges_14_0=ruleRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"ranges",
        		lv_ranges_14_0, 
        		"Range");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_9_4());
    }
)?)
;





// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current; } 
	 EOF 
;

// Rule Range
ruleRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRangeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getRangeAccess().getModuleModuleDefineCrossReference_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRangeAccess().getFullStopKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRangeRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRangeAccess().getVariableVariableDeclarationCrossReference_2_0()); 
	}

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRangeAccess().getInKeyword_3());
    }
	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRangeAccess().getLeftSquareBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getFromValueParserRuleCall_5_0()); 
	    }
		lv_from_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRangeAccess().getCommaKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getToValueParserRuleCall_7_0()); 
	    }
		lv_to_7_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"to",
        		lv_to_7_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRangeAccess().getRightSquareBracketKeyword_8());
    }
(	otherlv_9='delta' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRangeAccess().getDeltaKeyword_9_0());
    }
	otherlv_10='=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRangeAccess().getEqualsSignKeyword_9_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getDeltaValueParserRuleCall_9_2_0()); 
	    }
		lv_delta_11_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"delta",
        		lv_delta_11_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getActionAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleModuleDefine
entryRuleModuleDefine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleDefineRule()); }
	 iv_ruleModuleDefine=ruleModuleDefine 
	 { $current=$iv_ruleModuleDefine.current; } 
	 EOF 
;

// Rule ModuleDefine
ruleModuleDefine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleDefineAccess().getModuleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getModuleDefineAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleDefineRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleDefineAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleDefineAccess().getVariablesVariableDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_variables_3_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleDefineRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_3_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModuleDefineAccess().getSemicolonKeyword_3_1());
    }
)+((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleDefineAccess().getRulesRuleParserRuleCall_4_0_0()); 
	    }
		lv_rules_5_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleDefineRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_5_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModuleDefineAccess().getSemicolonKeyword_4_1());
    }
)+(	otherlv_7='target' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getModuleDefineAccess().getTargetKeyword_5_0());
    }
	otherlv_8='never' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getModuleDefineAccess().getNeverKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleDefineAccess().getNeverExpressionParserRuleCall_5_2_0()); 
	    }
		lv_never_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleDefineRule());
	        }
       		add(
       			$current, 
       			"never",
        		lv_never_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getModuleDefineAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExprExpressionParserRuleCall_3_0()); 
	    }
		lv_expr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'int' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getTypeAccess().getNameIntKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "int");
	    }

)
)
    |(
(
		lv_name_1_0=	'float' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameFloatKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "float");
	    }

)
)
    |(
(
		lv_name_2_0=	'bool' 
    {
        newLeafNode(lv_name_2_0, grammarAccess.getTypeAccess().getNameBoolKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_0, "bool");
	    }

)
))
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getCondExpressionParserRuleCall_0_0()); 
	    }
		lv_cond_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getActionActionCrossReference_2_0()); 
	}

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getRightSquareBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getNdCasesNDCaseParserRuleCall_4_0()); 
	    }
		lv_ndCases_4_0=ruleNDCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"ndCases",
        		lv_ndCases_4_0, 
        		"NDCase");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleNDCase
entryRuleNDCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNDCaseRule()); }
	 iv_ruleNDCase=ruleNDCase 
	 { $current=$iv_ruleNDCase.current; } 
	 EOF 
;

// Rule NDCase
ruleNDCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='=>' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNDCaseAccess().getEqualsSignGreaterThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNDCaseAccess().getCasesCaseParserRuleCall_1_0()); 
	    }
		lv_cases_1_0=ruleCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNDCaseRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_1_0, 
        		"Case");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='#' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNDCaseAccess().getNumberSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNDCaseAccess().getCasesCaseParserRuleCall_2_1_0()); 
	    }
		lv_cases_3_0=ruleCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNDCaseRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_3_0, 
        		"Case");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseRule()); }
	 iv_ruleCase=ruleCase 
	 { $current=$iv_ruleCase.current; } 
	 EOF 
;

// Rule Case
ruleCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCaseAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getWeightExpressionParserRuleCall_1_0()); 
	    }
		lv_weight_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		set(
       			$current, 
       			"weight",
        		lv_weight_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_hasCondition_2_0=	',' 
    {
        newLeafNode(lv_hasCondition_2_0, grammarAccess.getCaseAccess().getHasConditionCommaKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCaseRule());
	        }
       		setWithLastConsumed($current, "hasCondition", true, ",");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getCondExpressionParserRuleCall_2_1_0()); 
	    }
		lv_cond_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCaseAccess().getGreaterThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getUpdateUpdateParserRuleCall_4_0()); 
	    }
		lv_update_5_0=ruleUpdate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		add(
       			$current, 
       			"update",
        		lv_update_5_0, 
        		"Update");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCaseAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getUpdateUpdateParserRuleCall_5_1_0()); 
	    }
		lv_update_7_0=ruleUpdate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		add(
       			$current, 
       			"update",
        		lv_update_7_0, 
        		"Update");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUpdate
entryRuleUpdate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpdateRule()); }
	 iv_ruleUpdate=ruleUpdate 
	 { $current=$iv_ruleUpdate.current; } 
	 EOF 
;

// Rule Update
ruleUpdate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUpdateAccess().getNoActionAction_0_0(),
            $current);
    }
)	otherlv_1='noaction' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUpdateAccess().getNoactionKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUpdateAccess().getAssignAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getUpdateAccess().getVariableVariableDeclarationCrossReference_1_1_0()); 
	}

)
)	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUpdateAccess().getEqualsSignKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateAccess().getExprExpressionParserRuleCall_1_3_0()); 
	    }
		lv_expr_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleEnvironment
entryRuleEnvironment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnvironmentRule()); }
	 iv_ruleEnvironment=ruleEnvironment 
	 { $current=$iv_ruleEnvironment.current; } 
	 EOF 
;

// Rule Environment
ruleEnvironment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnvironmentRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEnvironmentAccess().getModulesModuleDefineCrossReference_0_0()); 
	}

)
)(	otherlv_1='|{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnvironmentAccess().getVerticalLineLeftCurlyBracketKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnvironmentRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getEnvironmentAccess().getActionsActionCrossReference_1_1_0()); 
	}

)
)+	otherlv_3='}|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEnvironmentAccess().getRightCurlyBracketVerticalLineKeyword_1_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnvironmentRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getEnvironmentAccess().getModulesModuleDefineCrossReference_1_3_0()); 
	}

)
))*)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLogicalParserRuleCall()); 
    }
    this_Logical_0=ruleLogical
    { 
        $current = $this_Logical_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLogical
entryRuleLogical returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalRule()); }
	 iv_ruleLogical=ruleLogical 
	 { $current=$iv_ruleLogical.current; } 
	 EOF 
;

// Rule Logical
ruleLogical returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalAccess().getRelationParserRuleCall_0()); 
    }
    this_Relation_0=ruleRelation
    { 
        $current = $this_Relation_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalAccess().getAndLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLogicalAccess().getAndKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalAccess().getOrLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='or' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLogicalAccess().getOrKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAccess().getRightRelationParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"Relation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	 iv_ruleRelation=ruleRelation 
	 { $current=$iv_ruleRelation.current; } 
	 EOF 
;

// Rule Relation
ruleRelation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationAccess().getAdditionParserRuleCall_0()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationAccess().getLeqLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='<=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRelationAccess().getLessThanSignEqualsSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationAccess().getLessLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='<' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRelationAccess().getLessThanSignKeyword_1_0_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationAccess().getEqLeftAction_1_0_2_0(),
            $current);
    }
)	otherlv_6='==' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRelationAccess().getEqualsSignEqualsSignKeyword_1_0_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationAccess().getNeqLeftAction_1_0_3_0(),
            $current);
    }
)	otherlv_8='!=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRelationAccess().getExclamationMarkEqualsSignKeyword_1_0_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationAccess().getGeqLeftAction_1_0_4_0(),
            $current);
    }
)	otherlv_10='>=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRelationAccess().getGreaterThanSignEqualsSignKeyword_1_0_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationAccess().getGtrLeftAction_1_0_5_0(),
            $current);
    }
)	otherlv_12='>' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRelationAccess().getGreaterThanSignKeyword_1_0_5_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getRightAdditionParserRuleCall_1_1_0()); 
	    }
		lv_right_13_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_13_0, 
        		"Addition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrimaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getNotAction_1_0(),
            $current);
    }
)	otherlv_4='not' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getNotKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getCondPrimaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_cond_5_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_5_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getLiteralAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getValueValueParserRuleCall_2_1_0()); 
	    }
		lv_value_7_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getQuantifierAction_3_0(),
            $current);
    }
)	otherlv_9='exists' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPrimaryExpressionAccess().getExistsKeyword_3_1());
    }
(
(
		lv_name_10_0=RULE_ID
		{
			newLeafNode(lv_name_10_0, grammarAccess.getPrimaryExpressionAccess().getNameIDTerminalRuleCall_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_10_0, 
        		"ID");
	    }

)
)	otherlv_11=':' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getPrimaryExpressionAccess().getColonKeyword_3_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
        }
	otherlv_12=RULE_ID
	{
		newLeafNode(otherlv_12, grammarAccess.getPrimaryExpressionAccess().getModuleModuleDefineCrossReference_3_4_0()); 
	}

)
)	otherlv_13='such that' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getPrimaryExpressionAccess().getSuchThatKeyword_3_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getCondPrimaryExpressionParserRuleCall_3_6_0()); 
	    }
		lv_cond_14_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_14_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getExternalReferenceAction_4_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
        }
	otherlv_16=RULE_ID
	{
		newLeafNode(otherlv_16, grammarAccess.getPrimaryExpressionAccess().getModuleQuantifierCrossReference_4_1_0()); 
	}

)
)	otherlv_17='.' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_4_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
        }
	otherlv_18=RULE_ID
	{
		newLeafNode(otherlv_18, grammarAccess.getPrimaryExpressionAccess().getVariableVariableDeclarationCrossReference_4_3_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getLocalReferenceAction_5_0(),
            $current);
    }
)(	otherlv_20='this' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getPrimaryExpressionAccess().getThisKeyword_5_1_0());
    }
	otherlv_21='.' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_5_1_1());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
        }
	otherlv_22=RULE_ID
	{
		newLeafNode(otherlv_22, grammarAccess.getPrimaryExpressionAccess().getVariableVariableDeclarationCrossReference_5_2_0()); 
	}

)
)))
;





// Entry rule entryRuleValue
entryRuleValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); } 
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current.getText(); }  
	 EOF 
;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getValueAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_FLOAT_1=RULE_FLOAT    {
		$current.merge(this_FLOAT_1);
    }

    { 
    newLeafNode(this_FLOAT_1, grammarAccess.getValueAccess().getFLOATTerminalRuleCall_1()); 
    }

    |    this_BOOL_2=RULE_BOOL    {
		$current.merge(this_BOOL_2);
    }

    { 
    newLeafNode(this_BOOL_2, grammarAccess.getValueAccess().getBOOLTerminalRuleCall_2()); 
    }
)
    ;





RULE_INT : ('0'..'9')+;

RULE_FLOAT : ('-'? RULE_INT* ('.' RULE_INT+)?|'-'? RULE_INT+ '.'|'-'? RULE_INT+ ('.' RULE_INT*)? ('e'|'E') ('-'|'+')? RULE_INT+);

RULE_BOOL : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


